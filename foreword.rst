前言
========

请在开始使用Flask之前阅读本文。也希望本文能够回答关于Flask项目的初衷以及目标，以及flask适用的场景（情境）等问题。

什么是“微”？
------------

“微”(“Micro”)并不是意味着把整个Web应用放入到一个Python文件，尽管确实可以这么做。当然“微”(“Micro”)也不是意味Flask的功能上是不足的。微框架中的“微”(“Micro”)是指Flask旨在保持代码简洁且易于扩展。Flask不会为你做太多的选择，例如选择什么样的数据库。Flask为你做的是很容易修改的，比如选择什么样的模版引擎。其它的一切取决于你，因此Flask能满足你所需要的。

默认情况下，Flask并不包含数据库抽象层，表单验证或者任何其它现有的库(Django)能够处理的。相反，Flask支持扩展，这些扩展能够添加功能到你的应用，像是Flask本身实现的一样。众多的扩展提供了数据库集成，表单验证，上传处理，多种开放的认证技术等功能。Flask可能是“微”型的，但是已经能够在各种各样的需求中生产使用。

配置和约定
-----------------------------

Flask有许多带有合理默认值的配置项，也遵循一些惯例。例如：按惯例，模板和静态文件存储在应用 Python 源代码树下的子目录中，而这是可以改变的，你通常不必这么做，尤其是在刚开始的时候。

与Flask共同成长
------------------

一旦你的Flask项目搭建以及运行起来，你会发现在社区中有大量可用的扩展集成到你的生产环境项目中来。Flask 核心团队会审阅这些扩展，确保经过验证过的扩展在未来版本中仍能使用。

随着你的代码库的增长，你能够自由地为你的项目做出恰当的设计决定。Flask会继续尽Python的可能提供一个简单的粘合层。你可以在SQLAlchemy 或者其它数据库工具中实现高级模式，适当的时候引入非关系型数据持久化，使用框架无关的WSGI工具，WSGI是Python的web接口。

Flask中有许多可定制化的钩子。如果你需要更多地定制化，只需要继承Flask类就行了。如果对此有兴趣的话，可以查看 :ref:`becomingbig` 。
如果你对Flask设计原理好奇的话，请阅读 :ref:`design` 。

请继续浏览 :ref:`installation` ，:ref:`quickstart`，或者 :ref:`advanced_foreword`。
